# file: roles/kafka/tasks/main.yml



- name: Make sure the kafka group is present
  action: group name={{ kafka_group }} state=present

- name: Make sure the kafka user directory is present 
  file: path="/app/home/{{ kafka_user }}" state=directory

- name: Make sure the kafka user is present
  user: name={{ kafka_user }} group={{ kafka_group }} home="/app/home/{{ kafka_user }}" shell=/bin/bash state=present comment="Kafka user"

- name: Creates /csi
  file: path=/csi state=directory mode=0777

- name: copy librdkafka gen-ssl-certs.sh
  template: src=gen-ssl-certs.sh dest=/usr/local/bin/gen-ssl-certs.sh owner=root group=root mode=755

- name: Creates dummy ca cert dir
  file: path=/csi/dummy_ca state=directory mode=0750

- name: create dummy ca cert
  shell: gen-ssl-certs.sh ca ca-cert dummy
  args:
    chdir: /csi/dummy_ca
    creates: /csi/dummy_ca/ca-cert

- name: Creates /usr/share/ca-certificates/dummy_ca
  file: path=/usr/share/ca-certificates/dummy_ca state=directory mode=0755

- file: path=/usr/share/ca-certificates/dummy_ca/ca-cert state=absent

- file: path=/csi/broker_keystore state=absent

- file: path=/csi/java_client_keystore state=absent

- file: path=/csi/openssl_client_keystore state=absent

- name: Creates broker keystore dir
  file: path=/etc/kafka-broker-keystore  state=directory owner={{ kafka_user }} group={{ kafka_group }} mode=0750

- name: create broker keystore
  shell: gen-ssl-certs.sh -k server /csi/dummy_ca/ca-cert {{ansible_hostname}}_ {{ansible_hostname}}
  args:
    chdir: /etc/kafka-broker-keystore
    creates: /etc/kafka-broker-keystore/{{ansible_hostname}}_server.keystore.jks

#this is just a sample -should probably per app / user / docker container ...
- name: creates client credentials
  file: path=/etc/kspp/credentials/ state=directory

- name: copy ca cert 
  command: cp /csi/dummy_ca/ca-cert /etc/kspp/credentials/{{ansible_hostname}}_cacert.pem
  args:
    creates: /etc/kspp/credentials/{{ansible_hostname}}_cacert.pem

- name: creates java client keystore
  shell: gen-ssl-certs.sh -k client /csi/dummy_ca/ca-cert {{ansible_hostname}}_ {{ansible_hostname}}
  args:
    chdir: /etc/kspp/credentials/
    creates: /etc/kspp/credentials/{{ansible_hostname}}_client.keystore.jks

- name: creates openssl client cert and key
  shell: gen-ssl-certs.sh client /csi/dummy_ca/ca-cert {{ansible_hostname}}_ {{ansible_hostname}}
  args:
    chdir: /etc/kspp/credentials/
    creates: /etc/kspp/credentials/{{ansible_hostname}}_client.pem

- name: create a env file
  template: src=kspp_env dest=/etc/kspp/{{ansible_hostname}}_kspp_env mode=0755

# install kafka
  
- name: Creates src directory {{ kafka_root_dir }}/src
  file: path={{ kafka_root_dir }}/src state=directory

- name: Creates config directory
  file: path="{{ kafka_root_dir }}/config" state=directory

- name: create log directories
  file: path={{ item }} state=directory owner={{ kafka_user }} group={{ kafka_group }} mode=0750 recurse=yes
  with_items: "{{ kafka_log_dirs }}"

- name: download jolokia {{ jolokia_version }}  
  get_url: 
    url: https://github.com/rhuss/jolokia/releases/download/v{{jolokia_version}}/jolokia-{{jolokia_version}}-bin.tar.gz  
    dest: /tmp/jolokia-{{jolokia_version}}-bin.tar.gz
 
- name: unarchive jolokia {{ jolokia_version }}  
  unarchive: 
    src: /tmp/jolokia-{{jolokia_version}}-bin.tar.gz  
    dest: /usr/share/java 
    creates: /usr/share/java/jolokia-{{jolokia_version}}/agents/jolokia-jvm.jar
    
- name: download kafka {{ kafka_full_version }}
  get_url: url={{ kafka_download_url }} dest={{ kafka_root_dir }}/src/kafka_{{ kafka_full_version }}.tgz
  
- command: chdir={{ kafka_root_dir }} tar xzf {{ kafka_root_dir }}/src/kafka_{{ kafka_full_version }}.tgz creates={{ kafka_root_dir }}/kafka_{{ kafka_full_version }}/bin/kafka-server-start.sh

- name: Update the symbolic link to the kafka install
  file: path={{ kafka_root_dir }}/kafka src={{ kafka_root_dir }}/kafka_{{ kafka_full_version }} state=link force=yes
  notify:
    - restart kafka
#    - restart-kafka-delay

- name: Update the configuration
  template: src=server.properties dest={{ kafka_root_dir }}/config/server.properties owner={{ kafka_user }} group={{ kafka_group }} mode=0644
  notify:
    - restart kafka
#    - restart-kafka-delay

- name: " kafka-broker - replace start script"
  template: src=kafka-server-start.sh dest="{{ kafka_root_dir }}/kafka/bin/kafka-server-start.sh" owner="{{ kafka_user }}" group="{{ kafka_group }}" mode=0774
  notify:
    - restart kafka
#    - restart-kafka-delay

- name: Update the install permissions of kafka
  file: path={{ kafka_root_dir }}/kafka_{{ kafka_full_version }} owner={{ kafka_user }} group={{ kafka_group }} state=directory recurse=yes
 
- name: Update the install permissions of jolokia
  file: path={{ kafka_root_dir }}/jolokia-{{ jolokia_version }} owner={{ kafka_user }} group={{ kafka_group }} state=directory recurse=yes
 
- name: systemd start script
  template: src=kafka-broker.service dest=/etc/systemd/system/kafka-broker.service owner=root group=root mode=644 
  notify: 
    - reload systemd
    - restart kafka
#    - restart-kafka-delay    

- name: "make sure the service is running and enabled"
  service: "name=kafka-broker state=started enabled=yes"

 
